// Copyright (c) John A. Carlos Jr., all rights reserved.

Inl void
ExeJunk()
{
  auto name = Str( "C:/doc/dev/cpp/proj/main/exe/nocrt.exe" );
  auto name_len = CstrLength( name );
  auto file = FileOpen( name, name_len, fileopen_t::only_existing, fileop_t::R, fileop_t::R );
  auto contents = FileAlloc( file );
  auto hdr = Cast( _IMAGE_DOS_HEADER*, contents.mem );

  stack_resizeable_cont_t<u8> exe;
  Alloc( exe, 1024*1024 );

  IMAGE_DOS_HEADER h = {};
  h.e_magic = 0x5a4d;
  h.e_cblp = 0x0090;
  h.e_cp = 0x0003;
  h.e_cparhdr = 0x0004;
  h.e_maxalloc = 0xffff;
  h.e_sp = 0x00b8;
  h.e_lfarlc = 0x0040;
  h.e_lfanew = 0x000000b0;
  Memmove( AddBack( exe, sizeof( h ) ), &h, sizeof( h ) );

  u8 dos_program[112] = {
//    0x0e,0x1f,0xba,0x0e,0x00,0xb4,0x09,0xcd,0x21,0xb8,0x01,0x4c,0xcd,0x21,0x54,0x68,0x69,0x73,0x20,0x70,
//    0x72,0x6f,0x67,0x72,0x61,0x6d,0x20,0x63,0x61,0x6e,0x6e,0x6f,0x74,0x20,0x62,0x65,0x20,0x72,0x75,0x6e,
//    0x20,0x69,0x6e,0x20,0x44,0x4f,0x53,0x20,0x6d,0x6f,0x64,0x65,0x2e,0x0d,0x0d,0x0a,0x24,0x00,0x00,0x00,
//    0x00,0x00,0x00,0x00,0xcc,0xab,0xf0,0xd5,0x88,0xca,0x9e,0x86,0x88,0xca,0x9e,0x86,0x88,0xca,0x9e,0x86,
//    0xd3,0xa2,0x9a,0x87,0x83,0xca,0x9e,0x86,0xd3,0xa2,0x9d,0x87,0x81,0xca,0x9e,0x86,0xd3,0xa2,0x9b,0x87,
//    0x21,0xca,0x9e,0x86,0x5d,0xa7,0x9b,0x87,0xa7,0xca,0x9e,0x86,0x5d,0xa7,0x9a,0x87,0x99,0xca,0x9e,0x86,
//    0x5d,0xa7,0x9d,0x87,0x80,0xca,0x9e,0x86,0x81,0xb2,0x0d,0x86,0x8a,0xca,0x9e,0x86,0xd3,0xa2,0x9f,0x87,
//    0x85,0xca,0x9e,0x86,0x88,0xca,0x9f,0x86,0x5d,0xca,0x9e,0x86,0x13,0xa4,0x9b,0x87,0x89,0xca,0x9e,0x86,
//    0x13,0xa4,0x9c,0x87,0x89,0xca,0x9e,0x86,0x52,0x69,0x63,0x68,0x88,0xca,0x9e,0x86,0x00,0x00,0x00,0x00,
//    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    0x0e,0x1f,0xba,0x0e,0x00,0xb4,0x09,0xcd,0x21,0xb8,0x01,0x4c,0xcd,0x21,0x54,0x68,0x69,0x73,0x20,0x70,
    0x72,0x6f,0x67,0x72,0x61,0x6d,0x20,0x63,0x61,0x6e,0x6e,0x6f,0x74,0x20,0x62,0x65,0x20,0x72,0x75,0x6e,
    0x20,0x69,0x6e,0x20,0x44,0x4f,0x53,0x20,0x6d,0x6f,0x64,0x65,0x2e,0x0d,0x0d,0x0a,0x24,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xc9,0x8f,0x0a,0xdf,0x8d,0xee,0x64,0x8c,0x8d,0xee,0x64,0x8c,0x8d,0xee,0x64,0x8c,
    0x16,0x80,0x6c,0x8d,0x8c,0xee,0x64,0x8c,0x16,0x80,0x66,0x8d,0x8c,0xee,0x64,0x8c,0x52,0x69,0x63,0x68,
    0x8d,0xee,0x64,0x8c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  };
  Memmove( AddBack( exe, _countof( dos_program ) ), AL( dos_program ) );

  u8 nt_signature[4] = {
    0x50,0x45,0x00,0x00 // PE00
  };
  Memmove( AddBack( exe, _countof( nt_signature ) ), AL( nt_signature ) );

  IMAGE_FILE_HEADER fh = {};
  fh.Machine = 0x8664;
  fh.NumberOfSections = 0x0004;
  fh.TimeDateStamp = 0x5ecf6a0e;
  fh.PointerToSymbolTable = 0x00000000;
  fh.NumberOfSymbols = 0x00000000;
  fh.SizeOfOptionalHeader = 0x00f0;
  fh.Characteristics = 0x0022;
  Memmove( AddBack( exe, sizeof( fh ) ), &fh, sizeof( fh ) );

  IMAGE_OPTIONAL_HEADER oh = {};
  oh.Magic = 0x020b;
  oh.MajorLinkerVersion = 0x0e;
  oh.MinorLinkerVersion = 0x18;
  oh.SizeOfCode = 0x00000200;
  oh.SizeOfInitializedData = 0x00000600;
  oh.SizeOfUninitializedData = 0x00000000;
  oh.AddressOfEntryPoint = 0x00001000;
  oh.BaseOfCode = 0x00001000;
  oh.ImageBase = 0x0000000140000000;
  oh.SectionAlignment = 0x00001000;
  oh.FileAlignment = 0x00000200;
  oh.MajorOperatingSystemVersion = 0x0005;
  oh.MinorOperatingSystemVersion = 0x0002;
  oh.MajorImageVersion = 0x0000;
  oh.MinorImageVersion = 0x0000;
  oh.MajorSubsystemVersion = 0x0005;
  oh.MinorSubsystemVersion = 0x0002;
  oh.Win32VersionValue = 0x00000000;
  oh.SizeOfImage = 0x00005000;
  oh.SizeOfHeaders = 0x00000400;
  oh.CheckSum = 0x00000000;
  oh.Subsystem = 0x0003;
  oh.DllCharacteristics = 0x8160;
  oh.SizeOfStackReserve = 0x0000000000100000;
  oh.SizeOfStackCommit = 0x0000000000001000;
  oh.SizeOfHeapReserve = 0x0000000000100000;
  oh.SizeOfHeapCommit = 0x0000000000001000;
  oh.LoaderFlags = 0x00000000;
  oh.NumberOfRvaAndSizes = 0x00000010;
  oh.DataDirectory[0x00000000] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // export
  oh.DataDirectory[0x00000001] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // import
  oh.DataDirectory[0x00000002] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // resource
  oh.DataDirectory[0x00000003] = { /*VirtualAddress=*/0x00004000, /*Size=*/0x0000000c }; // exception
  oh.DataDirectory[0x00000004] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // security
  oh.DataDirectory[0x00000005] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // base relocation table
  oh.DataDirectory[0x00000006] = { /*VirtualAddress=*/0x00002010, /*Size=*/0x00000054 }; // debug
  oh.DataDirectory[0x00000007] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // description string
  oh.DataDirectory[0x00000008] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // RVA of global pointer
  oh.DataDirectory[0x00000009] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // TLS
  oh.DataDirectory[0x0000000a] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // load configuration
  oh.DataDirectory[0x0000000b] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // bound import
  oh.DataDirectory[0x0000000c] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // import address table
  oh.DataDirectory[0x0000000d] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // delay load import
  oh.DataDirectory[0x0000000e] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // com runtime
  oh.DataDirectory[0x0000000f] = { /*VirtualAddress=*/0x00000000, /*Size=*/0x00000000 }; // reserved
  Memmove( AddBack( exe, sizeof( oh ) ), &oh, sizeof( oh ) );

  // read/execute
  IMAGE_SECTION_HEADER sh_text = {};
  Memmove( sh_text.Name, ".text", 5 );
  sh_text.Misc.VirtualSize = 0x00000090;
  sh_text.VirtualAddress = 0x00001000;
  sh_text.SizeOfRawData = 0x00000200;
  sh_text.PointerToRawData = 0x00000400;
  sh_text.PointerToRelocations = 0x00000000;
  sh_text.PointerToLinenumbers = 0x00000000;
  sh_text.NumberOfRelocations = 0x0000;
  sh_text.NumberOfLinenumbers = 0x0000;
  sh_text.Characteristics = 0x60000020;
  Memmove( AddBack( exe, sizeof( sh_text ) ), &sh_text, sizeof( sh_text ) );

  // read-only initialized data
  IMAGE_SECTION_HEADER sh_rdata = {};
  Memmove( sh_rdata.Name, ".rdata", 6 );
  sh_rdata.Misc.VirtualSize = 0x00000144;
  sh_rdata.VirtualAddress = 0x00002000;
  sh_rdata.SizeOfRawData = 0x00000200;
  sh_rdata.PointerToRawData = 0x00000600;
  sh_rdata.PointerToRelocations = 0x00000000;
  sh_rdata.PointerToLinenumbers = 0x00000000;
  sh_rdata.NumberOfRelocations = 0x0000;
  sh_rdata.NumberOfLinenumbers = 0x0000;
  sh_rdata.Characteristics = 0x40000040;
  Memmove( AddBack( exe, sizeof( sh_rdata ) ), &sh_rdata, sizeof( sh_rdata ) );

  // read/write initialized data
  IMAGE_SECTION_HEADER sh_data = {};
  Memmove( sh_data.Name, ".data", 5 );
  sh_data.Misc.VirtualSize = 0x00000012;
  sh_data.VirtualAddress = 0x00003000;
  sh_data.SizeOfRawData = 0x00000200;
  sh_data.PointerToRawData = 0x00000800;
  sh_data.PointerToRelocations = 0x00000000;
  sh_data.PointerToLinenumbers = 0x00000000;
  sh_data.NumberOfRelocations = 0x0000;
  sh_data.NumberOfLinenumbers = 0x0000;
  sh_data.Characteristics = 0xc0000040;
  Memmove( AddBack( exe, sizeof( sh_data ) ), &sh_data, sizeof( sh_data ) );

  IMAGE_SECTION_HEADER sh_pdata = {};
  Memmove( sh_pdata.Name, ".pdata", 6 );
  sh_pdata.Misc.VirtualSize = 0x0000000c;
  sh_pdata.VirtualAddress = 0x00004000;
  sh_pdata.SizeOfRawData = 0x00000200;
  sh_pdata.PointerToRawData = 0x00000a00;
  sh_pdata.PointerToRelocations = 0x00000000;
  sh_pdata.PointerToLinenumbers = 0x00000000;
  sh_pdata.NumberOfRelocations = 0x0000;
  sh_pdata.NumberOfLinenumbers = 0x0000;
  sh_pdata.Characteristics = 0x40000040;
  Memmove( AddBack( exe, sizeof( sh_pdata ) ), &sh_pdata, sizeof( sh_pdata ) );

  auto pdata = contents.mem + sh_pdata.PointerToRawData;
  auto pdata_len = sh_pdata.Misc.VirtualSize / sizeof( RUNTIME_FUNCTION );

  For( i, 0, pdata_len ) {
    auto rf = Cast( RUNTIME_FUNCTION*, pdata ) + i;
    AssertCrash(
      sh_rdata.VirtualAddress <= rf->UnwindInfoAddress  &&
      rf->UnwindInfoAddress < sh_rdata.VirtualAddress + sh_rdata.Misc.VirtualSize
      );
    auto file_ptr_unwindinfo = sh_rdata.PointerToRawData + rf->UnwindInfoAddress - sh_rdata.VirtualAddress;
    auto ui = Cast( UNWIND_INFO*, contents.mem + file_ptr_unwindinfo );
    rf = rf;
  }

  For( i, 0, exe.len ) {
    AssertCrash( exe.mem[i] == contents.mem[i] );
  }

  Free( exe );
  Free( contents );
  FileFree( file );
}
